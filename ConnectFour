import java.util.Scanner;

public class ConnectFour {

    public static void printBoard(char[][]array){ // prints the board from bottom up
        for (int i = array.length - 1; i >= 0; i--) {
            for (int j = 0 ; j < array[i].length; j++) {
                System.out.print(array[i][j]);
            }
            System.out.println();
        }
    }
    public static void initializeBoard(char[][] array) {
        for(int i = 0; i < array.length; i++) {
            for (int j=0; j < array[i].length; j++) {
                array[i][j] = '-';
            }
        }
    }
    public static int insertChip (char[][]array, int col, char chipType) { // inserts a chip
            int row =0;
            for(int i =0; i< array.length; i++  ){
               if (array[i][col] !='-'){ // checks if the spot is empty from the bottom
                   row=row+1;
               } else if (array[i][col]=='-'){ // if the spot isn't filled it adds the current chiptype
                   array[i][col]=chipType;
                   break;
               }
            }
    return row;}

    public static boolean checkIfWinner(char[][] array, int col, int row, char chipType) {
        int count=0;// counts number in a row
        if(chipType != '-') { // horizontal check
            for (int i = 0; i < array[row].length; i++) {
                if(array[row][i]==chipType){
                    count++;
                    if(count==4){
                        return true;
                    }
                }
            }
            count=0;
            for (int i =0; i<array[col].length; i++){ // vertical check
                if (array[i][col]==chipType){
                    count++;
                    if(count==4){
                        return true;
                    }
                }
            }
        }
    return false;}

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int col = 5;
        int row = 4;
        int playerTurn = 1; // allows players to alternate after each turn. first player is 1.
        char chipType;
        int counter=0; // counts how many turns so max isn't reached
        int count;

        System.out.print("What would you like the height of the board to be? ");
        row = scanner.nextInt();
        System.out.print("What would you like the length of the board to be?");
        col = scanner.nextInt();
        final int maxNum = col*row; // sets the max amount of chips able to be placed to how many places on the board.
        char[][] board = new char[row][col];

        initializeBoard(board);
        printBoard(board); // prints blank board

        System.out.println("Player 1: x");
        System.out.println("Player 2: o");

do {
    if(playerTurn ==1) {
        System.out.println("Player 1: Which column would you like to choose?");
        col = scanner.nextInt();
        counter++;
        chipType = 'x';
        row =insertChip(board, col, chipType);
        printBoard(board);
        if(checkIfWinner(board, col, row, chipType)){ // if winner returns true the game stops
            System.out.print("Player 1 won the game!");
            break;
        }
        playerTurn = 2;
    }
    if (playerTurn ==2) {
        System.out.print("Player 2: Which column would you like to choose?");
        col = scanner.nextInt();
        counter++; // increments for each chip is placed.
        chipType ='o';
        row=insertChip(board, col, chipType);
        printBoard(board);
        if(checkIfWinner(board, col, row, chipType)){
            System.out.print("Player 2 won the game!");
            break; // ends the loop if true
        }
        playerTurn =1; //set playerTurn to 1 to go back to player 1
    }

}while (counter!=maxNum); // when the counter reaches the max number there is a draw and the loop ends
    if(counter==maxNum) {
        System.out.print("Draw. Nobody wins.");
    }
    }
}
